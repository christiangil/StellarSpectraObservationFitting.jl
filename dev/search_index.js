var documenterSearchIndex = {"docs":
[{"location":"init/#Initialization-and-model-selection","page":"Initialization and model selection","title":"Initialization and model selection","text":"","category":"section"},{"location":"init/","page":"Initialization and model selection","title":"Initialization and model selection","text":"The total SSOF model is most commonly held in a StellarSpectraObservationFitting.OrderModelWobble struct.","category":"page"},{"location":"init/","page":"Initialization and model selection","title":"Initialization and model selection","text":"A good start for a SSOF model for a given dataset can be obtained with","category":"page"},{"location":"init/","page":"Initialization and model selection","title":"Initialization and model selection","text":"StellarSpectraObservationFitting.calculate_initial_model","category":"page"},{"location":"init/#StellarSpectraObservationFitting.calculate_initial_model","page":"Initialization and model selection","title":"StellarSpectraObservationFitting.calculate_initial_model","text":"calculate_initial_model(data; kwargs...)\n\nFind a SSOF model for a given dataset, data. Defaults to returning the AIC-minimum model\n\nOptional arguments\n\ninstrument::String=\"None\": The name of the instrument(s) the data was taken from. For bookkeeping\ndesired_order::Int=0: What order (if any) the data was taken from. For bookkeeping\nstar::String=\"None\": The name of the star the data was taken from. For bookkeeping\ntimes::AbstractVector=1:size(data.flux, 2): The list of times (in days). Used to calculate intra-night RMS\nμ_min::Real=0: Set the minimum flux value for the output of make_template()\nμ_max::Real=Inf: Set the maximum flux value for the output of make_template()\nuse_mean::Bool=true: Whether to use the mean or median for make_template()\nstop_early::Bool=false: Whether to stop the model search the first time adding a component increases the AIC\nremove_reciprocal_continuum::Bool=false: Whether you should attempt to remove places where the telluric template and stellar template are opposing each other (i.e. where continuum goes up in one and down in the other)\nreturn_full_path::Bool=false: Whether to return all of the searched models and metrics\nmax_n_tel::Int=5: The maximum amount of telluric feature vectors to look for\nmax_n_star::Int=5: The maximum amount of stellar feature vectors to look for\nuse_all_comps::Bool=false: Whether to use all feature vectors, regardless of AIC\ncareful_first_step::Bool=true: Whether to shrink the learning rates until the loss improves on the first iteration\nspeed_up::Bool=false: Whether to inflate the learning rates until the loss is no longer improving throughout the optimization\nlog_λ_gp_star::Real=1/SOAP_gp_params.λ: The log λ lengthscale of the stellar regularization GP\nlog_λ_gp_tel::Real=1/LSF_gp_params.λ: The log λ lengthscale of the telluric regularization GP\nkwargs...: kwargs passed to OrderModel constructor\n\n\n\n\n\n","category":"function"},{"location":"init/","page":"Initialization and model selection","title":"Initialization and model selection","text":"which builds up the SSOF model component by component using noise-weighted expectation maximization PCA and find the AIC-minimum SSOF model for a given maximum amount of feature vectors.","category":"page"},{"location":"data/#Data-preparation","page":"Data preparation","title":"Data preparation","text":"","category":"section"},{"location":"data/","page":"Data preparation","title":"Data preparation","text":"SSOF models are meant for clean, high-resolution, continuum-normalized spectra. These spectra should be stored in the StellarSpectraObservationFitting.GenericData and StellarSpectraObservationFitting.LSFData objects, which are used to ensure that all of the necessary information exists to optimize a SSOF model.","category":"page"},{"location":"data/","page":"Data preparation","title":"Data preparation","text":"StellarSpectraObservationFitting.GenericData","category":"page"},{"location":"data/#StellarSpectraObservationFitting.GenericData","page":"Data preparation","title":"StellarSpectraObservationFitting.GenericData","text":"GenericData\n\nHolds preprocessed data used to optimize SSOF models\n\n\n\n\n\n","category":"type"},{"location":"data/","page":"Data preparation","title":"Data preparation","text":"StellarSpectraObservationFitting.LSFData","category":"page"},{"location":"data/#StellarSpectraObservationFitting.LSFData","page":"Data preparation","title":"StellarSpectraObservationFitting.LSFData","text":"LSFData\n\nHolds preprocessed data used to optimize SSOF models (including a matrix that approximates convolution with the instrument line spread function)\n\n\n\n\n\n","category":"type"},{"location":"data/","page":"Data preparation","title":"Data preparation","text":"The functions for creating these objects from observation .fits files are currently outside of SSOF proper to keep unnecessary dependencies down, but you can see the reformat_spectra function in SSOFUtilities/init.jl (which flags low SNR observations and those with weird wavelength calibration as well as ) and NEID/init.jl for a script using it.","category":"page"},{"location":"data/","page":"Data preparation","title":"Data preparation","text":"Once the data is collected, we recommend running StellarSpectraObservationFitting.process! to perform some data preprocessing.","category":"page"},{"location":"data/","page":"Data preparation","title":"Data preparation","text":"StellarSpectraObservationFitting.process!","category":"page"},{"location":"data/#StellarSpectraObservationFitting.process!","page":"Data preparation","title":"StellarSpectraObservationFitting.process!","text":"process!(d; λ_thres=4000., min_snr=8, kwargs...)\n\nDoing all of the data preprocessing, including continuum-fitting and masking of infinite points, anomalously snappy or high pixels, and low SNR edges.\n\n\n\n\n\n","category":"function"},{"location":"continuum/#Data-preprocessing-functions","page":"Data preprocessing","title":"Data preprocessing functions","text":"","category":"section"},{"location":"continuum/","page":"Data preprocessing","title":"Data preprocessing","text":"Modules = [StellarSpectraObservationFitting]\nPages   = [\"src/continuum_functions.jl\"]","category":"page"},{"location":"continuum/#StellarSpectraObservationFitting.bad_pixel_flagger-Tuple{AbstractMatrix{T} where T, AbstractMatrix{T} where T}","page":"Data preprocessing","title":"StellarSpectraObservationFitting.bad_pixel_flagger","text":"bad_pixel_flagger(y, σ²; prop=.005, thres=8)\n\nFind anomalous pixels where δ⁴y/δ⁴x is high, passing prop and thres to outlier_mask()\n\n\n\n\n\n","category":"method"},{"location":"continuum/#StellarSpectraObservationFitting.continuum_normalize!-Tuple{StellarSpectraObservationFitting.Data}","page":"Data preprocessing","title":"StellarSpectraObservationFitting.continuum_normalize!","text":"continuum_normalize!(d; order=6, kwargs...)\n\nDivide d.flux (and d.var) by its sigma-clipped polynomial continuum (or its square)\n\n\n\n\n\n","category":"method"},{"location":"continuum/#StellarSpectraObservationFitting.fit_continuum-Tuple{AbstractVector{T} where T, AbstractVector{T} where T, AbstractVector{T} where T}","page":"Data preprocessing","title":"StellarSpectraObservationFitting.fit_continuum","text":"fit_continuum(x, y, σ²; ignore_weights=false, order=6, nsigma=[0.5,3.0], maxniter=50, edge_mask::Int=0)\n\nFit the continuum of y with a polynomial of order order using assymetric sigma-clipping, similar to wobble\n\n\n\n\n\n","category":"method"},{"location":"continuum/#StellarSpectraObservationFitting.flat_normalize!-Tuple{StellarSpectraObservationFitting.Data}","page":"Data preprocessing","title":"StellarSpectraObservationFitting.flat_normalize!","text":"flat_normalize!(d; kwargs...)\n\nDivide d.flux (and d.var) by its 0.9 quantile value (or its square)\n\n\n\n\n\n","category":"method"},{"location":"continuum/#StellarSpectraObservationFitting.mask_bad_edges!-NTuple{4, AbstractMatrix{T} where T}","page":"Data preprocessing","title":"StellarSpectraObservationFitting.mask_bad_edges!","text":"mask_bad_edges!(y, σ², log_λ_star, log_λ_star_bounds; window_width=128, min_snr=8., verbose=true, always_mask_something=false, edges=nothing, kwargs...)\n\nMask out edges of y (either given by edges or where y/σ is on average below min_snr)\n\n\n\n\n\n","category":"method"},{"location":"continuum/#StellarSpectraObservationFitting.mask_bad_pixel!-NTuple{4, AbstractMatrix{T} where T}","page":"Data preprocessing","title":"StellarSpectraObservationFitting.mask_bad_pixel!","text":"mask_bad_pixel!(y, σ², log_λ_star, log_λ_star_bounds; padding=2, include_bary_shifts=false, verbose=true, bad_pixels=nothing, kwargs...)\n\nMask anomalous pixels where δ⁴y/δ⁴x is high\n\n\n\n\n\n","category":"method"},{"location":"continuum/#StellarSpectraObservationFitting.mask_high_pixels!-Tuple{AbstractVector{T} where T, AbstractVector{T} where T, AbstractVector{T} where T}","page":"Data preprocessing","title":"StellarSpectraObservationFitting.mask_high_pixels!","text":"mask_high_pixels!(bad, y, σ²; padding=0, max_flux=2., padding=2, using_weights=false)\n\nMask out pixels whose y values are above max_flux\n\n\n\n\n\n","category":"method"},{"location":"continuum/#StellarSpectraObservationFitting.mask_infinite_pixels!-NTuple{4, AbstractMatrix{T} where T}","page":"Data preprocessing","title":"StellarSpectraObservationFitting.mask_infinite_pixels!","text":"mask_infinite_pixels!(y, σ², log_λ_star, log_λ_star_bounds; padding=0, include_bary_shifts=false, verbose=true, kwargs...)\n\nMask out pixels whose y or σ² values are infinite\n\n\n\n\n\n","category":"method"},{"location":"continuum/#StellarSpectraObservationFitting.mask_isolated_pixels!-Tuple{AbstractMatrix{T} where T}","page":"Data preprocessing","title":"StellarSpectraObservationFitting.mask_isolated_pixels!","text":"mask_isolated_pixels!(σ²; neighbors_required::Int=29, verbose::Bool=true)\n\nMask between two flagged pixels if there are fewer than neighbors_required pixels between them\n\n\n\n\n\n","category":"method"},{"location":"continuum/#StellarSpectraObservationFitting.mask_low_pixels!-Tuple{AbstractVector{T} where T, AbstractVector{T} where T, AbstractVector{T} where T}","page":"Data preprocessing","title":"StellarSpectraObservationFitting.mask_low_pixels!","text":"mask_low_pixels!(bad, y, σ²; padding=0, min_flux=0., padding=2, using_weights=false)\n\nMask out pixels whose y values are below min_flux\n\n\n\n\n\n","category":"method"},{"location":"continuum/#StellarSpectraObservationFitting.outlier_mask-Tuple{AbstractVecOrMat{T} where T}","page":"Data preprocessing","title":"StellarSpectraObservationFitting.outlier_mask","text":"outlier_mask(v; thres=10, prop=0.2, return_stats=false, only_low::Bool=false)\n\nMask outliers in v that are outside thres-σ after winsorizing out the top and bottom prop quantiles\n\n\n\n\n\n","category":"method"},{"location":"continuum/#StellarSpectraObservationFitting.process!-Tuple{Any}","page":"Data preprocessing","title":"StellarSpectraObservationFitting.process!","text":"process!(d; λ_thres=4000., min_snr=8, kwargs...)\n\nDoing all of the data preprocessing, including continuum-fitting and masking of infinite points, anomalously snappy or high pixels, and low SNR edges.\n\n\n\n\n\n","category":"method"},{"location":"continuum/#StellarSpectraObservationFitting.snap-Tuple{AbstractMatrix{T} where T}","page":"Data preprocessing","title":"StellarSpectraObservationFitting.snap","text":"snap(y)\n\nEstimate δ⁴y/δ⁴x (a.k.a. the snap) with finite differences. See https://en.wikipedia.org/wiki/Finitedifference#Higher-orderdifferences\n\n\n\n\n\n","category":"method"},{"location":"indices/#Index","page":"Everything else","title":"Index","text":"","category":"section"},{"location":"indices/","page":"Everything else","title":"Everything else","text":"","category":"page"},{"location":"indices/","page":"Everything else","title":"Everything else","text":"Modules = [StellarSpectraObservationFitting]","category":"page"},{"location":"indices/#StellarSpectraObservationFitting.Adam","page":"Everything else","title":"StellarSpectraObservationFitting.Adam","text":"Adam\n\nHolds information used for Adaptive Moment Estimation optimization\n\n\n\n\n\n","category":"type"},{"location":"indices/#StellarSpectraObservationFitting.AdamState","page":"Everything else","title":"StellarSpectraObservationFitting.AdamState","text":"AdamState\n\nHolds diagonstic information on the current state of an ADAM opmitization\n\n\n\n\n\n","category":"type"},{"location":"indices/#StellarSpectraObservationFitting.AdamSubWorkspace","page":"Everything else","title":"StellarSpectraObservationFitting.AdamSubWorkspace","text":"AdamSubWorkspace\n\nHolds a set of model parameters and the ADAM optimizer and functions used to optimize them\n\n\n\n\n\n","category":"type"},{"location":"indices/#StellarSpectraObservationFitting.BaseLinearModel","page":"Everything else","title":"StellarSpectraObservationFitting.BaseLinearModel","text":"BaseLinearModel\n\nA (log) linear model without a mean (either Ms or exp(Ms)). Used for DPCA models\n\n\n\n\n\n","category":"type"},{"location":"indices/#StellarSpectraObservationFitting.FrozenTelWorkspace","page":"Everything else","title":"StellarSpectraObservationFitting.FrozenTelWorkspace","text":"FrozenTelWorkspace\n\nA workspace to optimize all of the parameters in a SSOF model (except for the tellruc template and features) and data it is to be optimized on\n\n\n\n\n\n","category":"type"},{"location":"indices/#StellarSpectraObservationFitting.FullLinearModel","page":"Everything else","title":"StellarSpectraObservationFitting.FullLinearModel","text":"FullLinearModel\n\nA (log) linear model including a mean (either μ+Ms or μexp(M*s))\n\n\n\n\n\n","category":"type"},{"location":"indices/#StellarSpectraObservationFitting.GenericDatum","page":"Everything else","title":"StellarSpectraObservationFitting.GenericDatum","text":"GenericDatum\n\nHolds a single preprocessed spectrum used to optimize SSOF models\n\n\n\n\n\n","category":"type"},{"location":"indices/#StellarSpectraObservationFitting.ModelWorkspace-Tuple{StellarSpectraObservationFitting.OrderModel, StellarSpectraObservationFitting.Data}","page":"Everything else","title":"StellarSpectraObservationFitting.ModelWorkspace","text":"ModelWorkspace(model, data)\n\nCreate a workspace for optimizing model with data Creates a FrozenTelWorkspace if the model has no telluric feature vectors and an empty telluric template\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.OptimSubWorkspace","page":"Everything else","title":"StellarSpectraObservationFitting.OptimSubWorkspace","text":"OptimSubWorkspace\n\nHolds a set of model parameters and the Optim optimizer and functions used to optimize them\n\n\n\n\n\n","category":"type"},{"location":"indices/#StellarSpectraObservationFitting.OptimTelStarWorkspace","page":"Everything else","title":"StellarSpectraObservationFitting.OptimTelStarWorkspace","text":"OptimTelStarWorkspace\n\nA workspace to go back and forth optimizing the telluric and stellar parameters then the RVs in a SSOF model and data it is to be optimized on Uses methods in Optim\n\n\n\n\n\n","category":"type"},{"location":"indices/#StellarSpectraObservationFitting.OptimTotalWorkspace","page":"Everything else","title":"StellarSpectraObservationFitting.OptimTotalWorkspace","text":"OptimTotalWorkspace\n\nA workspace to optimize all of the parameters in a SSOF model and data it is to be optimized on Uses methods in Optim\n\n\n\n\n\n","category":"type"},{"location":"indices/#StellarSpectraObservationFitting.OrderModel-Tuple{StellarSpectraObservationFitting.Data}","page":"Everything else","title":"StellarSpectraObservationFitting.OrderModel","text":"OrderModel(d; kwargs...)\n\nConstructor for the OrderModel-type objects (SSOF model for a set of 1D spectra)\n\nOptional arguments\n\ninstrument::String=\"None\": The name of the instrument(s) the data was taken from. For bookkeeping\norder::Int=0: What order (if any) the data was taken from. For bookkeeping\nstar_str::String=\"None\": The name of the star the data was taken from. For bookkeeping\nn_comp_tel::Int=5: Amount of telluric feature vectors\nn_comp_star::Int=5: The maximum amount of stellar feature vectors\noversamp::Bool=true: Whether or not to integrate the model or do linear interpolation (for the telluric model)\ndpca::Bool=false: Whether to use Doppler-constrained PCA or variable interpolation location to determine the RVs\nlog_λ_gp_star::Real=1/SOAP_gp_params.λ: The log λ lengthscale of the stellar regularization GP\nlog_λ_gp_tel::Real=1/LSF_gp_params.λ: The log λ lengthscale of the telluric regularization GP\ntel_log_λ::Union{Nothing,AbstractRange}=nothing: The log\nstar_log_λ::Union{Nothing,AbstractRange}=nothing: The log λ lengthscale of the telluric regularization GP\nkwargs...: kwargs passed to Submodel constructors\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.OrderModelDPCA","page":"Everything else","title":"StellarSpectraObservationFitting.OrderModelDPCA","text":"OrderModelDPCA\n\nSSOF model for a set of 1D spectra using Doppler-constrained PCA to measure the RVs (which are contained in the RV Submodel)\n\n\n\n\n\n","category":"type"},{"location":"indices/#StellarSpectraObservationFitting.OrderModelWobble","page":"Everything else","title":"StellarSpectraObservationFitting.OrderModelWobble","text":"OrderModelWobble\n\nSSOF model for a set of 1D spectra using linear interpolation of the stellar model to measure the RVs\n\n\n\n\n\n","category":"type"},{"location":"indices/#StellarSpectraObservationFitting.Output-Tuple{StellarSpectraObservationFitting.OrderModelDPCA, StellarSpectraObservationFitting.Data}","page":"Everything else","title":"StellarSpectraObservationFitting.Output","text":"Output(om, d)\n\nCalculates the current outputs for the models at the observed wavelengths\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.OutputDPCA","page":"Everything else","title":"StellarSpectraObservationFitting.OutputDPCA","text":"OutputDPCA\n\nHolds the current outputs for the models at the observed wavelengths\n\n\n\n\n\n","category":"type"},{"location":"indices/#StellarSpectraObservationFitting.OutputWobble","page":"Everything else","title":"StellarSpectraObservationFitting.OutputWobble","text":"OutputWobble\n\nHolds the current outputs for the models at the observed wavelengths\n\n\n\n\n\n","category":"type"},{"location":"indices/#StellarSpectraObservationFitting.StellarInterpolationHelper","page":"Everything else","title":"StellarSpectraObservationFitting.StellarInterpolationHelper","text":"StellarInterpolationHelper\n\nA linear interpolation holding information to interpolate the stellar model shifted by an RV to the data\n\n\n\n\n\n","category":"type"},{"location":"indices/#StellarSpectraObservationFitting.Submodel","page":"Everything else","title":"StellarSpectraObservationFitting.Submodel","text":"Submodel\n\nHolds information on the wavelengths, LTISDE representaiton for the GP reguarlization term, and linear model for a SSOF model component\n\n\n\n\n\n","category":"type"},{"location":"indices/#StellarSpectraObservationFitting.TemplateModel","page":"Everything else","title":"StellarSpectraObservationFitting.TemplateModel","text":"TemplateModel\n\nA constant model (when there are no feature vectors)\n\n\n\n\n\n","category":"type"},{"location":"indices/#StellarSpectraObservationFitting.TotalWorkspace","page":"Everything else","title":"StellarSpectraObservationFitting.TotalWorkspace","text":"TotalWorkspace\n\nA workspace to optimize all of the parameters in a SSOF model and data it is to be optimized on Uses our custom implementation of ADAM\n\n\n\n\n\n","category":"type"},{"location":"indices/#ParameterHandling.flatten-Union{Tuple{T}, Tuple{Type{T}, StellarSpectraObservationFitting.LinearModel}} where T<:Real","page":"Everything else","title":"ParameterHandling.flatten","text":"flatten([eltype=Real], x::LinearModel)\n\nReturns a \"flattened\" representation of x::LinearModel as a vector of vectors and a function unflatten that takes a vector of reals of the same length and returns a LinearModel object\n\n\n\n\n\n","category":"method"},{"location":"indices/#ParameterHandling.flatten-Union{Tuple{T}, Tuple{Type{T}, SubArray}} where T<:Real","page":"Everything else","title":"ParameterHandling.flatten","text":"flatten([eltype=Real], x::SubArray)\n\nReturns a \"flattened\" representation of x::SubArray as a vector and a function unflatten that takes a vector of reals of the same length and returns an Array object\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.AdamState!-Tuple{StellarSpectraObservationFitting.AdamState, Any, Any}","page":"Everything else","title":"StellarSpectraObservationFitting.AdamState!","text":"AdamState!(as, ℓ, Δ)\n\nUpdate as with the next iteration's loss and gradient\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.D_to_rv-Tuple{Any}","page":"Everything else","title":"StellarSpectraObservationFitting.D_to_rv","text":"D_to_rv(D)\n\nApproximately converting a Doppler shift D ≡ log(λ1/λ0) in log-wavelength space to an RV using (λ1-λ0)/λ0 = λ1/λ0 - 1 = e^D - 1 ≈ β = v / c (with an extra negative sign from somewhere)\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.L1-Tuple{Any}","page":"Everything else","title":"StellarSpectraObservationFitting.L1","text":"L1 norm\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.L2-Tuple{Any}","page":"Everything else","title":"StellarSpectraObservationFitting.L2","text":"L2 norm\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.L∞-Tuple{VecOrMat{var\"#s55\"} where var\"#s55\"<:Real}","page":"Everything else","title":"StellarSpectraObservationFitting.L∞","text":"L∞ norm\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.Output!-Tuple{StellarSpectraObservationFitting.OutputDPCA, StellarSpectraObservationFitting.OrderModelDPCA, StellarSpectraObservationFitting.Data}","page":"Everything else","title":"StellarSpectraObservationFitting.Output!","text":"Output!(o, om, d)\n\nRecalculates the current outputs for the models at the observed wavelengths\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting._OSW_optimize!-Tuple{StellarSpectraObservationFitting.OptimSubWorkspace, Optim.Options}","page":"Everything else","title":"StellarSpectraObservationFitting._OSW_optimize!","text":"_OSW_optimize!(osw, options)\n\nOptimize the model in osw\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting._eval_lm-Tuple{Any, Any, Any}","page":"Everything else","title":"StellarSpectraObservationFitting._eval_lm","text":"_eval_lm(M, s, μ; log_lm=false)\n\nEvaluate a LinearModel\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting._eval_lm_vec-Tuple{StellarSpectraObservationFitting.OrderModel, Any}","page":"Everything else","title":"StellarSpectraObservationFitting._eval_lm_vec","text":"_eval_lm_vec(om, v; log_lm=_log_lm_default)\n\nEvaluate a vectorized version of a linear model in v\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting._eval_regularization-Tuple{StellarSpectraObservationFitting.OrderModel, StellarSpectraObservationFitting.ModelWorkspace, AbstractVecOrMat{T} where T, AbstractVecOrMat{T} where T}","page":"Everything else","title":"StellarSpectraObservationFitting._eval_regularization","text":"_eval_regularization(om, mws, training_inds, testing_inds; kwargs...)\n\nTraining om on the training data, evaluating _loss() on the testing data after optimizing the RVs and scores\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting._loss_recalc_rv_basis-Tuple{StellarSpectraObservationFitting.Output, StellarSpectraObservationFitting.OrderModel, StellarSpectraObservationFitting.Data}","page":"Everything else","title":"StellarSpectraObservationFitting._loss_recalc_rv_basis","text":"_loss_recalc_rv_basis(o, om, d; kwargs...)\n\n_loss() but including an AD-compliant way to recalcuate the Doppler basic vector \n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting._lower_inds!-Tuple{AbstractMatrix{T} where T, AbstractMatrix{T} where T, AbstractVector{var\"#s14\"} where var\"#s14\"<:Real, Any, AbstractMatrix{T} where T}","page":"Everything else","title":"StellarSpectraObservationFitting._lower_inds!","text":"_lower_inds!(lower_inds, lower_inds_adj, model_log_λ, rvs, log_λ_obs)\n\nfind the model_log_λ indices (incl. RV shifts) that bracket each log_λ_obs\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting._shift_log_λ_model-Tuple{Any, Any, Any}","page":"Everything else","title":"StellarSpectraObservationFitting._shift_log_λ_model","text":"_shift_log_λ_model(log_λ_obs_from, log_λ_obs_to, log_λ_model_from)\n\nGetting model log λ in a different reference frame using the shifts in the different log_λ_obs\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting._spectra_interp_gp!-Tuple{AbstractVector{T} where T, Any, AbstractVector{T} where T, Any, Any}","page":"Everything else","title":"StellarSpectraObservationFitting._spectra_interp_gp!","text":"_spectra_interp_gp!(fluxes, log_λ, flux_obs, var_obs, log_λ_obs; gp_mean=0., gp_base=SOAP_gp, mask_flux=Array{Bool}(undef, length(flux_obs)), mask_var=Array{Bool}(undef, length(flux_obs)))\n\nUse a GP to interpolate flux_obs observed at log_λ_obs onto log_λ\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.affected_pixels!-Tuple{Vector{T} where T, AbstractVector{T} where T}","page":"Everything else","title":"StellarSpectraObservationFitting.affected_pixels!","text":"affected_pixels!(affected1, affected2)\n\nStore the indicies in both affected1 and affected2 in affected1\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.affected_pixels-Tuple{AbstractVecOrMat{T} where T}","page":"Everything else","title":"StellarSpectraObservationFitting.affected_pixels","text":"affected_pixels(bad)\n\nStore the first indicies where bad` is true\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.aic-Tuple{Int64, Real}","page":"Everything else","title":"StellarSpectraObservationFitting.aic","text":"Akaike information criterion\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.aicc-Tuple{Int64, Real, Int64}","page":"Everything else","title":"StellarSpectraObservationFitting.aicc","text":"Akaike information criterion (corrected for small sample sizes)\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.bic-Tuple{Int64, Real, Int64}","page":"Everything else","title":"StellarSpectraObservationFitting.bic","text":"Bayesian information criterion\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.build_gp-Tuple{NamedTuple}","page":"Everything else","title":"StellarSpectraObservationFitting.build_gp","text":"build_gp(params)\n\nBuilds a Matern 5/2 TemporalGPs GP\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.calculate_initial_model-Tuple{StellarSpectraObservationFitting.Data}","page":"Everything else","title":"StellarSpectraObservationFitting.calculate_initial_model","text":"calculate_initial_model(data; kwargs...)\n\nFind a SSOF model for a given dataset, data. Defaults to returning the AIC-minimum model\n\nOptional arguments\n\ninstrument::String=\"None\": The name of the instrument(s) the data was taken from. For bookkeeping\ndesired_order::Int=0: What order (if any) the data was taken from. For bookkeeping\nstar::String=\"None\": The name of the star the data was taken from. For bookkeeping\ntimes::AbstractVector=1:size(data.flux, 2): The list of times (in days). Used to calculate intra-night RMS\nμ_min::Real=0: Set the minimum flux value for the output of make_template()\nμ_max::Real=Inf: Set the maximum flux value for the output of make_template()\nuse_mean::Bool=true: Whether to use the mean or median for make_template()\nstop_early::Bool=false: Whether to stop the model search the first time adding a component increases the AIC\nremove_reciprocal_continuum::Bool=false: Whether you should attempt to remove places where the telluric template and stellar template are opposing each other (i.e. where continuum goes up in one and down in the other)\nreturn_full_path::Bool=false: Whether to return all of the searched models and metrics\nmax_n_tel::Int=5: The maximum amount of telluric feature vectors to look for\nmax_n_star::Int=5: The maximum amount of stellar feature vectors to look for\nuse_all_comps::Bool=false: Whether to use all feature vectors, regardless of AIC\ncareful_first_step::Bool=true: Whether to shrink the learning rates until the loss improves on the first iteration\nspeed_up::Bool=false: Whether to inflate the learning rates until the loss is no longer improving throughout the optimization\nlog_λ_gp_star::Real=1/SOAP_gp_params.λ: The log λ lengthscale of the stellar regularization GP\nlog_λ_gp_tel::Real=1/LSF_gp_params.λ: The log λ lengthscale of the telluric regularization GP\nkwargs...: kwargs passed to OrderModel constructor\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.check_converged-Tuple{StellarSpectraObservationFitting.AdamState, Real, Real, Real}","page":"Everything else","title":"StellarSpectraObservationFitting.check_converged","text":"check_converged(as, f_reltol, g_reltol, g_L∞tol)\n\nCheck to see if the Adam optimization has coverged based on the change in loss or its gradient\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.check_for_valid_regularization-Tuple{Dict{Symbol, var\"#s157\"} where var\"#s157\"<:Real}","page":"Everything else","title":"StellarSpectraObservationFitting.check_for_valid_regularization","text":"check_for_valid_regularization(reg)\n\nMake sure all the keys in reg are in SSOF.keylist\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.choose_reg_and_ℓ-Tuple{Vector{Symbol}, StellarSpectraObservationFitting.OrderModel, Symbol, Vector{var\"#s156\"} where var\"#s156\"<:Real, Vector{var\"#s155\"} where var\"#s155\"<:Real, Int64}","page":"Everything else","title":"StellarSpectraObservationFitting.choose_reg_and_ℓ","text":"choose_reg_and_ℓ(reg_fields, om, reg_key, reg_hold, ℓs, j)\n\nSet the reg_key regularization for om once the local minimum is found\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.copy_reg!-Tuple{StellarSpectraObservationFitting.OrderModel, StellarSpectraObservationFitting.OrderModel}","page":"Everything else","title":"StellarSpectraObservationFitting.copy_reg!","text":"copy_reg!(from, to)\n\nCopy the regularizations from one OrderModel to another\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.create_λ_template-Tuple{AbstractMatrix{T} where T}","page":"Everything else","title":"StellarSpectraObservationFitting.create_λ_template","text":"create_λ_template(log_λ_obs; upscale=1.)\n\nCreating a uniform grid of log wavelengths for the SSOF models to be evaluated on\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.downsize-Tuple{StellarSpectraObservationFitting.FullLinearModel, Int64}","page":"Everything else","title":"StellarSpectraObservationFitting.downsize","text":"downsize(lm, n_comp)\n\nCreate a smaller version of lm that only copies some amount of the feature vectors\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.downsize_view-Tuple{StellarSpectraObservationFitting.FullLinearModel, Int64}","page":"Everything else","title":"StellarSpectraObservationFitting.downsize_view","text":"downsize(lm, n_comp)\n\nCreate a smaller view of lm that can only see some amount of the feature vectors\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.estimate_σ_bootstrap-Tuple{StellarSpectraObservationFitting.ModelWorkspace}","page":"Everything else","title":"StellarSpectraObservationFitting.estimate_σ_bootstrap","text":"estimate_σ_bootstrap(mws; n=50, return_holders=false, recalc_mean=false, multithread=nthreads() > 3, verbose=true)\n\nEstimate the uncertainties (and potentially covariances) for the RVs and scores in mws based on looking at the distribution of best-fit parameters after re-injecting photon noise. Slower than estimate_σ_curvature(), but more reliable.\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.estimate_σ_bootstrap_helper!-Tuple{AbstractMatrix{T} where T, Any, Any, Int64, StellarSpectraObservationFitting.ModelWorkspace, AbstractMatrix{T} where T, Int64}","page":"Everything else","title":"StellarSpectraObservationFitting.estimate_σ_bootstrap_helper!","text":"estimate_σ_bootstrap_helper!(rv_holder, tel_holder, star_holder, i, mws, data_noise, n; verbose=true)\n\nRefit the RVs and scores after re-injecting photon noise and store the results in rv_holder, tel_holder, and star_holder\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.estimate_σ_bootstrap_reducer-Tuple{AbstractArray, AbstractArray, Function}","page":"Everything else","title":"StellarSpectraObservationFitting.estimate_σ_bootstrap_reducer","text":"estimate_σ_bootstrap_reducer(shaper, holder, reducer)\n\nApply reducer on the first axis of holder and store the results in an array the shape of shaper\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.estimate_σ_curvature-Tuple{StellarSpectraObservationFitting.ModelWorkspace}","page":"Everything else","title":"StellarSpectraObservationFitting.estimate_σ_curvature","text":"estimate_σ_curvature(mws; kwargs...)\n\nEstimate the uncertainties for the RVs and scores in mws based on the local curvature of the loss function. Faster than estimate_σ_bootstrap(), but less reliable from ignoring cross terms in the Hessian.\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.estimate_σ_curvature_helper-Tuple{AbstractVecOrMat{T} where T, Function}","page":"Everything else","title":"StellarSpectraObservationFitting.estimate_σ_curvature_helper","text":"estimate_σ_curvature_helper(x, ℓ; n=7, use_gradient=false, multithread=nthreads() > 3, print_every=10, kwargs...)\n\nEstimate the uncertainties for the best-fit parameters x for ~Gaussian function ℓ based on the local curvature\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.estimate_σ_curvature_helper_finalizer!-Tuple{AbstractVecOrMat{T} where T, AbstractVector{T} where T, AbstractVector{T} where T, Int64}","page":"Everything else","title":"StellarSpectraObservationFitting.estimate_σ_curvature_helper_finalizer!","text":"estimate_σ_curvature_helper_finalizer!(σs, _ℓs, x_test, i; use_gradient=false, param_str=\"\", print_every=10, verbose=false, show_plots=false)\n\nCalculate uncertanties (filling σs) based on the _ℓs calculated at x_test\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.eval_regularization-Tuple{Vector{Symbol}, Symbol, Real, StellarSpectraObservationFitting.ModelWorkspace, AbstractVecOrMat{T} where T, AbstractVecOrMat{T} where T}","page":"Everything else","title":"StellarSpectraObservationFitting.eval_regularization","text":"eval_regularization(reg_fields, reg_key, reg_val, mws, training_inds, testing_inds; kwargs...)\n\nSetting regularizaiton values for a copy of mws.om then training it on the training data and evaluating _loss() on the testing data after optimizing the RVs and scores\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.fill_OrderModel!-Tuple{StellarSpectraObservationFitting.OrderModel, StellarSpectraObservationFitting.OrderModel, Any, Any}","page":"Everything else","title":"StellarSpectraObservationFitting.fill_OrderModel!","text":"fill_OrderModel!(om1, om2, inds_tel, inds_star)\n\nReplace the models in om1 with those in om2\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.fill_StarModel!-Tuple{StellarSpectraObservationFitting.OrderModel, StellarSpectraObservationFitting.FullLinearModel}","page":"Everything else","title":"StellarSpectraObservationFitting.fill_StarModel!","text":"fill_StarModel!(om, lm; inds=2:size(lm.M, 2))\n\nReplace the stellar model in om with lm\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.fill_TelModel!-Tuple{StellarSpectraObservationFitting.OrderModel, StellarSpectraObservationFitting.LinearModel}","page":"Everything else","title":"StellarSpectraObservationFitting.fill_TelModel!","text":"fill_TelModel!(om, lm)\n\nReplace the telluric model in om with lm\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.finalize_scores!-Tuple{Function, StellarSpectraObservationFitting.ModelWorkspace}","page":"Everything else","title":"StellarSpectraObservationFitting.finalize_scores!","text":"finalize_scores!(score_trainer, mws)\n\nRun score_trainer and update the output in mws\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.finalize_scores!-Tuple{StellarSpectraObservationFitting.ModelWorkspace}","page":"Everything else","title":"StellarSpectraObservationFitting.finalize_scores!","text":"finalize_scores!(mws; kwargs...)\n\nOptimize the scores in mws\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.finalize_scores_setup-Tuple{StellarSpectraObservationFitting.ModelWorkspace}","page":"Everything else","title":"StellarSpectraObservationFitting.finalize_scores_setup","text":"finalize_scores_setup(mws; verbose=_verbose_def, f_tol=_f_reltol_def_s, g_tol=_g_L∞tol_def_s, careful_first_step=true, speed_up=false, kwargs...)\n\nCreate a function that optimizes the model scores with Optim\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.first_iterate!-Tuple{Function, Real, Vector{var\"#s16\"} where var\"#s16\"<:AbstractArray, AbstractArray{Float64, N} where N, AbstractArray{Float64, N} where N, StellarSpectraObservationFitting.Adam}","page":"Everything else","title":"StellarSpectraObservationFitting.first_iterate!","text":"first_iterate!(l, l0, θs, θ, ∇θ, opt; ind=[], verbose=false)\n\nPerform an ADAM optimization step based on the contents of opt on θ and decreases the learning rate to ensure the loss actually decreases\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.fit_regularization!-Tuple{StellarSpectraObservationFitting.ModelWorkspace, AbstractVecOrMat{T} where T}","page":"Everything else","title":"StellarSpectraObservationFitting.fit_regularization!","text":"fit_regularization!(mws, testing_inds; key_list=_key_list_fit, share_regs=false, kwargs...)\n\nFit all of the regularization values in key_list for the model in mws\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.fit_regularization!-Tuple{StellarSpectraObservationFitting.ModelWorkspace}","page":"Everything else","title":"StellarSpectraObservationFitting.fit_regularization!","text":"fit_regularization!(mws; verbose=true, testing_ratio=0.33, careful_first_step=true, speed_up=false, kwargs...)\n\nFind the best fit model without regularization then fit all of the regularization values in key_list for the model in mws\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.fit_regularization_helper!-Tuple{Vector{Symbol}, Symbol, Real, StellarSpectraObservationFitting.ModelWorkspace, AbstractVecOrMat{T} where T, AbstractVecOrMat{T} where T, Real, Real, Real}","page":"Everything else","title":"StellarSpectraObservationFitting.fit_regularization_helper!","text":"fit_regularization_helper!(reg_fields, reg_key, before_ℓ, mws, training_inds, testing_inds, test_factor, reg_min, reg_max; start=10e3, cullable=Symbol[], robust_start=true, thres=8, kwargs...)\n\nSetting reg_key values in each Dict in mws.om.x (where x is each symbol in reg_fields) for a copy of mws.om then training it on the training data and evaluating _loss() on the testing data after optimizing the RVs and scores\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.flip_feature_vectors!-Tuple{StellarSpectraObservationFitting.FullLinearModel}","page":"Everything else","title":"StellarSpectraObservationFitting.flip_feature_vectors!","text":"flip_feature_vectors!(lm)\n\nMake each feature vector's median value negative\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.get_marginal_GP-Tuple{Distributions.Distribution{Distributions.Multivariate, Distributions.Continuous}, AbstractVector{T} where T, AbstractVector{T} where T}","page":"Everything else","title":"StellarSpectraObservationFitting.get_marginal_GP","text":"get_marginal_GP(finite_GP, ys, xs)\n\nMarginalizes a TemporalGPs GP on ys and xs\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.get_mean_GP-Tuple{Distributions.Distribution{Distributions.Multivariate, Distributions.Continuous}, AbstractVector{T} where T, AbstractVector{T} where T}","page":"Everything else","title":"StellarSpectraObservationFitting.get_mean_GP","text":"get_mean_GP(finite_GP, ys, xs)\n\nGets the mean of the posterior of a TemporalGPs GP\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.gp_Δℓ-Tuple{Any, AbstractMatrix{T} where T, AbstractMatrix{T} where T, AbstractMatrix{T} where T, AbstractMatrix{T} where T}","page":"Everything else","title":"StellarSpectraObservationFitting.gp_Δℓ","text":"gp_Δℓ(y, A_k, Σ_k, H_k, P∞; kwargs...)\n\nCalculate the gradient of gp_ℓ() w.r.t. y\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.gp_Δℓ_coefficients-Tuple{Int64, AbstractMatrix{T} where T, AbstractMatrix{T} where T}","page":"Everything else","title":"StellarSpectraObservationFitting.gp_Δℓ_coefficients","text":"gp_Δℓ_coefficients(n, A_k, Σ_k; H_k=H_k, P∞=P∞, sparsity=0, kwargs...)\n\nPrecalculate coefficients that can be used to calculate gradient of gp_ℓ() w.r.t. y\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.gp_Δℓ_helper_K-Tuple{Int64, AbstractMatrix{T} where T, AbstractMatrix{T} where T, AbstractMatrix{T} where T, AbstractMatrix{T} where T}","page":"Everything else","title":"StellarSpectraObservationFitting.gp_Δℓ_helper_K","text":"gp_Δℓ_helper_K(n, A_k, Σ_k, H_k, P∞; σ²_meas=_σ²_meas_def)\n\nPrecalculate all of the K matrices for at each time\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.gp_Δℓ_helper_γ-Tuple{Any, AbstractMatrix{T} where T, AbstractMatrix{T} where T, AbstractMatrix{T} where T, AbstractMatrix{T} where T}","page":"Everything else","title":"StellarSpectraObservationFitting.gp_Δℓ_helper_γ","text":"gp_Δℓ_helper_γ(y, A_k, Σ_k, H_k, P∞; σ²_meas=_σ²_meas_def)\n\nPrecalculate all of the γ values for at each time\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.gp_ℓ-Tuple{Any, AbstractMatrix{T} where T, AbstractMatrix{T} where T}","page":"Everything else","title":"StellarSpectraObservationFitting.gp_ℓ","text":"gp_ℓ(y, A_k, Σ_k; σ²_meas=_σ²_meas_def, H_k=H_k, P∞=P∞)\n\nGetting the posterior likelihood that y is from a LTISDE described by A_k and Σ_k, equivalent to a GP\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.gp_ℓ_nabla-Tuple{Any, AbstractMatrix{T} where T, AbstractMatrix{T} where T}","page":"Everything else","title":"StellarSpectraObservationFitting.gp_ℓ_nabla","text":"gp_ℓ_nabla(y, A_k, Σ_k; σ²_meas=_σ²_meas_def, H_k=H_k, P∞=P∞)\n\nGetting the posterior likelihood that y is from a LTISDE described by A_k and Σ_k, equivalent to a GP. Same as gp_ℓ() but removing things that Nabla doesn't like\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.gp_ℓ_precalc-Tuple{AbstractMatrix{T} where T, AbstractVector{T} where T, AbstractMatrix{T} where T, AbstractMatrix{T} where T}","page":"Everything else","title":"StellarSpectraObservationFitting.gp_ℓ_precalc","text":"gp_ℓ_precalc(ℓ_coeff, x, A_k, Σ_k; kwargs...)\n\nA version of gp_ℓ() using the coefficients calculated by gp_Δℓ_coefficients()\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.improve_initial_model!-Tuple{StellarSpectraObservationFitting.ModelWorkspace}","page":"Everything else","title":"StellarSpectraObservationFitting.improve_initial_model!","text":"improve_initial_model!(mws; careful_first_step=true, speed_up=false, kwargs...)\n\nTrain the model in mws with an extra step to ensure we are at a local maximum for the scores and RVs Defaults to taking a careful first step\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.improve_model!-Tuple{StellarSpectraObservationFitting.ModelWorkspace}","page":"Everything else","title":"StellarSpectraObservationFitting.improve_model!","text":"improve_model!(mws; verbose=true, kwargs...)\n\nTrain the model in mws with an extra step to ensure we are at a local maximum for the scores and RVs\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.insert_and_dedup!-Tuple{Vector{T} where T, Any}","page":"Everything else","title":"StellarSpectraObservationFitting.insert_and_dedup!","text":"\tinsert_and_dedup!(v, x)\n\nInsert x into sorted list v without duplicates\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.intra_night_std-Tuple{AbstractVector{T} where T, AbstractVector{T} where T}","page":"Everything else","title":"StellarSpectraObservationFitting.intra_night_std","text":"intra_night_std(rvs, times; thres=3, show_warn=true)\n\nCalculates the intra-night std for rvs time series observed at times (in days)\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.iterate!-Tuple{AbstractArray{Float64, N} where N, AbstractArray{Float64, N} where N, StellarSpectraObservationFitting.Adam}","page":"Everything else","title":"StellarSpectraObservationFitting.iterate!","text":"iterate!(θ, ∇θ, opt)\n\nPerform an ADAM optimization step based on the contents of opt on θ\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.log_lm-Tuple{StellarSpectraObservationFitting.TemplateModel}","page":"Everything else","title":"StellarSpectraObservationFitting.log_lm","text":"Whether a LinearModel is log linear\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.loss_func-Tuple{StellarSpectraObservationFitting.ModelWorkspace}","page":"Everything else","title":"StellarSpectraObservationFitting.loss_func","text":"loss_func(mws; include_priors=false)\n\nCreate a loss function for the model and data in mws\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.loss_funcs_frozen_tel-Tuple{StellarSpectraObservationFitting.Output, StellarSpectraObservationFitting.OrderModel, StellarSpectraObservationFitting.Data}","page":"Everything else","title":"StellarSpectraObservationFitting.loss_funcs_frozen_tel","text":"loss_funcs_frozen_tel(o, om, d)\n\nCreate loss functions for changing \t- the stellar templates, features, and scores and telluric scores \t- the telluric and stellar scores and RVs\n\nUsed to fit models with a set telluric model\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.loss_funcs_telstar-Tuple{StellarSpectraObservationFitting.Output, StellarSpectraObservationFitting.OrderModel, StellarSpectraObservationFitting.Data}","page":"Everything else","title":"StellarSpectraObservationFitting.loss_funcs_telstar","text":"loss_funcs_telstar(o, om, d)\n\nCreate loss functions for changing \t- the telluric and stellar templates, features, and scores \t- the telluric and stellar scores \t- the RVs\n\nUsed to fit scores efficiently with L-BFGS\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.loss_funcs_total-Tuple{StellarSpectraObservationFitting.Output, StellarSpectraObservationFitting.OrderModelDPCA, StellarSpectraObservationFitting.Data}","page":"Everything else","title":"StellarSpectraObservationFitting.loss_funcs_total","text":"loss_funcs_total(o, om, d)\n\nCreate loss functions for changing \t- the telluric and stellar templates, features, and scores \t- the telluric and stellar scores and RVs\n\nUsed to fit models with ADAM\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.mask!-Tuple{AbstractVecOrMat{T} where T, AbstractVecOrMat{T} where T}","page":"Everything else","title":"StellarSpectraObservationFitting.mask!","text":"mask!(var, bad_inds; using_weights=false)\n\nSetting var to reflect that the pixels at bad_inds should be masked\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.mask_stellar_feature!-Tuple{AbstractMatrix{T} where T, AbstractMatrix{T} where T, Real, Real}","page":"Everything else","title":"StellarSpectraObservationFitting.mask_stellar_feature!","text":"mask_stellar_feature!(var, log_λ_star, log_λ_low, log_λ_high; verbose=true, inverse=false, kwargs...)\n\nMasking where log_λ_star is between (or outside if inverse=true) log_λ_low and log_λ_high\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.mask_stellar_pixel!-Tuple{AbstractMatrix{T} where T, AbstractMatrix{T} where T, AbstractMatrix{T} where T, Int64}","page":"Everything else","title":"StellarSpectraObservationFitting.mask_stellar_pixel!","text":"mask_stellar_pixel!(var, log_λ_star, log_λ_star_bounds, i; padding=0, verbose=true, kwargs...)\n\nMasking a pixel in the stellar frame to prevent different lines from coming in at different times\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.mask_telluric_feature!-Tuple{AbstractMatrix{T} where T, AbstractMatrix{T} where T, AbstractMatrix{T} where T, Real, Real}","page":"Everything else","title":"StellarSpectraObservationFitting.mask_telluric_feature!","text":"mask_stellar_feature!(var, log_λ_obs, log_λ_star, log_λ_low, log_λ_high; verbose=true, include_bary_shifts=true, kwargs...)\n\nMasking where log_λ_obs is between log_λ_low and log_λ_high.  Can also perform in the stellar frame to prevent different lines from coming in at different times with include_bary_shifts\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.model_prior-Tuple{Any, StellarSpectraObservationFitting.OrderModel, Symbol}","page":"Everything else","title":"StellarSpectraObservationFitting.model_prior","text":"model_prior(lm, om, key)\n\nCalulate the model prior on lm with the regularization terms in om.reg_ * key\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.model_s_prior-Tuple{Any, Dict}","page":"Everything else","title":"StellarSpectraObservationFitting.model_s_prior","text":"model_s_prior(s, reg)\n\nAdd an L2 term to the scores if there are any regularization terms applied to the feature vectors\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.no_tellurics-Tuple{StellarSpectraObservationFitting.OrderModel}","page":"Everything else","title":"StellarSpectraObservationFitting.no_tellurics","text":"no_tellurics(model)\n\nFigure out whether a model uses its telluric model\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.opt_funcs-Tuple{Function, AbstractVecOrMat{T} where T}","page":"Everything else","title":"StellarSpectraObservationFitting.opt_funcs","text":"opt_funcs(loss, pars)\n\nCreate an objective object for Optim from loss that uses a flattened verison of pars\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.oversamp_interp_helper-Tuple{AbstractVector{T} where T, AbstractVector{T} where T}","page":"Everything else","title":"StellarSpectraObservationFitting.oversamp_interp_helper","text":"oversamp_interp_helper(to_bounds, from_x)\n\nFinding the coefficients to integrate the model between observed pixel bounds\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.ratio_clarifier_string-Tuple{Real}","page":"Everything else","title":"StellarSpectraObservationFitting.ratio_clarifier_string","text":"ratio_clarifier_string(ratio)\n\nConvert ratio to a nice 3 digit-rounded string\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.recalc_total!-Tuple{StellarSpectraObservationFitting.OutputDPCA, StellarSpectraObservationFitting.GenericData}","page":"Everything else","title":"StellarSpectraObservationFitting.recalc_total!","text":"recalc_total!(o, d)\n\nRecalulates the current outputs for the total model at the observed wavelengths\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.remove_lm_score_means!-Tuple{StellarSpectraObservationFitting.FullLinearModel}","page":"Everything else","title":"StellarSpectraObservationFitting.remove_lm_score_means!","text":"remove_lm_score_means!(lm; prop=0.)\n\nRecenter the scores in lm around 0\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.reset_regularization!-Tuple{StellarSpectraObservationFitting.OrderModel}","page":"Everything else","title":"StellarSpectraObservationFitting.reset_regularization!","text":"reset_regularization!(om)\n\nReset all of the keys in the regularization Dicts to the default values\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.rm_GP_regularization!-Tuple{StellarSpectraObservationFitting.OrderModel}","page":"Everything else","title":"StellarSpectraObservationFitting.rm_GP_regularization!","text":"rm_GP_regularization!(om)\n\nRemove all of the GP keys in the regularization Dicts\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.rm_dict!-Tuple{Dict, String}","page":"Everything else","title":"StellarSpectraObservationFitting.rm_dict!","text":"rm_dict!(d, key_start)\n\nRemove all keys starting with key_start in a Dict\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.rm_dict!-Tuple{Dict}","page":"Everything else","title":"StellarSpectraObservationFitting.rm_dict!","text":"rm_dict!(d)\n\nRemove all keys in a Dict\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.rm_regularization!-Tuple{StellarSpectraObservationFitting.OrderModel}","page":"Everything else","title":"StellarSpectraObservationFitting.rm_regularization!","text":"rm_regularization!(om)\n\nRemove all of the keys in the regularization Dicts\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.rv_model-Tuple{StellarSpectraObservationFitting.OrderModelDPCA}","page":"Everything else","title":"StellarSpectraObservationFitting.rv_model","text":"rv_model(om; lm=om.rv.lm)\n\nGets RV model interpolated onto the observed wavelengths (used by OrderModelDPCA)\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.rv_to_D-Tuple{Any}","page":"Everything else","title":"StellarSpectraObservationFitting.rv_to_D","text":"rv_to_D(v)\n\nApproximately converting an RV to a Doppler shift D ≡ log(λ1/λ0) in log-wavelength space using (λ1-λ0)/λ0 = λ1/λ0 - 1 = e^D - 1 ≈ β = v / c (with an extra negative sign from somewhere)\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.rvs-Tuple{StellarSpectraObservationFitting.OrderModelDPCA}","page":"Everything else","title":"StellarSpectraObservationFitting.rvs","text":"rvs(model)\n\nGet RVs (in m/s) from an OrderModel The negative sign is only in the DPCA version because of how SSOF was originally coded\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.scale_α_helper!-Tuple{StellarSpectraObservationFitting.Adam, Real, AbstractVecOrMat{T} where T, Real, Bool}","page":"Everything else","title":"StellarSpectraObservationFitting.scale_α_helper!","text":"scale_α_helper!(opt, α_ratio, θ, α, scale_α)\n\nOptionally scale opt.α based on the amplitudes in θ\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.shared_attention-Tuple{Any}","page":"Everything else","title":"StellarSpectraObservationFitting.shared_attention","text":"shared_attention(M)\n\nAd-hoc regularization that punishes feature vectors with power in the same place\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.spectra_interp-Tuple{AbstractMatrix{T} where T, AbstractVector{T} where T, StellarSpectraObservationFitting.StellarInterpolationHelper}","page":"Everything else","title":"StellarSpectraObservationFitting.spectra_interp","text":"spectra_interp(model_flux, rvs, sih)\n\nInterpolate the stellar model to the data using the lower inds in sih\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.spectra_interp-Tuple{Any, SparseArrays.SparseMatrixCSC}","page":"Everything else","title":"StellarSpectraObservationFitting.spectra_interp","text":"spectra_interp(model, interp_helper)\n\nInterpolates model using the interoplation described by interp_helper\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.speed_up_iterate!-Tuple{Function, Vector{var\"#s17\"} where var\"#s17\"<:AbstractArray, AbstractArray{Float64, N} where N, AbstractArray{Float64, N} where N, StellarSpectraObservationFitting.Adam}","page":"Everything else","title":"StellarSpectraObservationFitting.speed_up_iterate!","text":"speed_up_iterate!(l, θs, θ, ∇θ, opt; ind=[], verbose=false)\n\nPerform an ADAM optimization step based on the contents of opt on θ and increases the learning rate to attempt to speed up the optimization\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.star_model-Tuple{StellarSpectraObservationFitting.OrderModelDPCA}","page":"Everything else","title":"StellarSpectraObservationFitting.star_model","text":"star_model(om; lm=om.star.lm)\n\nGets stellar model interpolated onto the observed wavelengths\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.star_prior-Tuple{StellarSpectraObservationFitting.OrderModel}","page":"Everything else","title":"StellarSpectraObservationFitting.star_prior","text":"star_prior(om)\n\nCalulate the stellar model prior on om.star.lm with the regularization terms in om.star_tel\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.tel_model-Tuple{StellarSpectraObservationFitting.OrderModel}","page":"Everything else","title":"StellarSpectraObservationFitting.tel_model","text":"tel_model(om; lm=om.tel.lm)\n\nGets telluric model interpolated onto the observed wavelengths\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.tel_prior-Tuple{StellarSpectraObservationFitting.OrderModel}","page":"Everything else","title":"StellarSpectraObservationFitting.tel_prior","text":"tel_prior(om)\n\nCalulate the telluric model prior on om.tel.lm with the regularization terms in om.reg_tel\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.total_length-Tuple{StellarSpectraObservationFitting.AdamWorkspace}","page":"Everything else","title":"StellarSpectraObservationFitting.total_length","text":"total_length(mws)\n\nCalculates the number of parameters of mws\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.total_model-Tuple{Any, Any, Any}","page":"Everything else","title":"StellarSpectraObservationFitting.total_model","text":"total_model(tel, star)\n\nMultiply the telluric and stellar models\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.train_OrderModel!-Tuple{StellarSpectraObservationFitting.AdamWorkspace}","page":"Everything else","title":"StellarSpectraObservationFitting.train_OrderModel!","text":"train_OrderModel!(mws; ignore_regularization=false, verbose=_verbose_def, shift_scores=true, μ_positive=true, tel_μ_lt1=false, rm_doppler=true, kwargs...)\n\nTrain the model in mws with some optional modifications to the optimization (ignoreregularization, shiftscore, μpositive, telμlt1, rmdoppler)\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.train_OrderModel!-Tuple{StellarSpectraObservationFitting.OptimTelStarWorkspace}","page":"Everything else","title":"StellarSpectraObservationFitting.train_OrderModel!","text":"train_OrderModel!(ow::OptimTelStarWorkspace; verbose=_verbose_def, iter=_iter_def, f_tol=_f_reltol_def, g_tol=_g_L∞tol_def, train_telstar=true, ignore_regularization=false, μ_positive=false, careful_first_step=true, speed_up=false, kwargs...)\n\nTrain the model in ow, training the telluric and stellar parameters, then the RVs\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.train_OrderModel!-Tuple{StellarSpectraObservationFitting.OptimTotalWorkspace}","page":"Everything else","title":"StellarSpectraObservationFitting.train_OrderModel!","text":"train_OrderModel!(ow::OptimTelStarWorkspace; verbose=_verbose_def, iter=_iter_def, f_tol=_f_reltol_def, g_tol=_g_L∞tol_def, train_telstar=true, ignore_regularization=false, μ_positive=false, careful_first_step=true, speed_up=false, kwargs...)\n\nTrain the model in ow, training the telluric and stellar parameters, then the RVs\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.train_SubModel!-Tuple{StellarSpectraObservationFitting.AdamSubWorkspace}","page":"Everything else","title":"StellarSpectraObservationFitting.train_SubModel!","text":"train_SubModel!(aws; iter=_iter_def, f_reltol=_f_reltol_def, g_reltol=_g_reltol_def, g_L∞tol=_g_L∞tol_def, cb=(as::AdamState)->(), careful_first_step=true, speed_up=false, kwargs...)\n\nTrain the model parameters in aws for up to iter Adam iterations until it converges based on check_converged()\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.train_rvs_optim!-Tuple{StellarSpectraObservationFitting.OptimSubWorkspace, AbstractVector{T} where T, Function}","page":"Everything else","title":"StellarSpectraObservationFitting.train_rvs_optim!","text":"train_rvs_optim!(rv_ws, rv, optim_cb; g_tol=_g_L∞tol_def_s, f_tol=_f_reltol_def_s, iter=_iter_def, ignore_regularization=false, μ_positive=false, kwargs...)\n\nTrain the RVs from the rv_ws with Optim\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.undersamp_interp_helper-Tuple{AbstractVector{T} where T, AbstractVector{T} where T}","page":"Everything else","title":"StellarSpectraObservationFitting.undersamp_interp_helper","text":"undersamp_interp_helper(to_x, from_x)\n\nFinding the coefficients to linear interpolate the model at observed pixel locations\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.update!-Tuple{StellarSpectraObservationFitting.AdamSubWorkspace}","page":"Everything else","title":"StellarSpectraObservationFitting.update!","text":"update!(aws; careful_first_step=true, speed_up=false)\n\nPerform an ADAM optimization step for the model parameters in aws\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.update_interpolation_locations!-Tuple{StellarSpectraObservationFitting.OrderModel, StellarSpectraObservationFitting.Data}","page":"Everything else","title":"StellarSpectraObservationFitting.update_interpolation_locations!","text":"update_interpolation_locations!(om, d; use_mean=false)\n\nMake sure the linear iterpolation locations for going from the stellar model to the data are correct as the RVs change\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.zero_regularization-Tuple{StellarSpectraObservationFitting.OrderModel}","page":"Everything else","title":"StellarSpectraObservationFitting.zero_regularization","text":"zero_regularization(om; include_L1_factor=false)\n\nZero-out all of the keys in the regularization Dicts\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.Δℓ_precalc-Tuple{AbstractMatrix{T} where T, AbstractVector{T} where T, AbstractMatrix{T} where T, AbstractMatrix{T} where T, AbstractMatrix{T} where T, AbstractMatrix{T} where T}","page":"Everything else","title":"StellarSpectraObservationFitting.Δℓ_precalc","text":"gp_ℓ_precalc(ℓ_coeff, x, A_k, Σ_k; kwargs...)\n\nCalculate the gradient of gp_ℓ_precalc() w.r.t. y\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.ℓ-Tuple{Real, Real, Int64}","page":"Everything else","title":"StellarSpectraObservationFitting.ℓ","text":"Gaussian log-likelihood function\n\n\n\n\n\n","category":"method"},{"location":"indices/#StellarSpectraObservationFitting.ℓ_prereqs-Tuple{Matrix{T} where T}","page":"Everything else","title":"StellarSpectraObservationFitting.ℓ_prereqs","text":"ℓ_prereqs(vars)\n\nCalculate some terms needed to calculate the log-likelihood\n\n\n\n\n\n","category":"method"},{"location":"error/#Error-estimation","page":"Model error estimation","title":"Error estimation","text":"","category":"section"},{"location":"error/","page":"Model error estimation","title":"Model error estimation","text":"The RVs found by SSOF are useless if we don't know how confident we should be in them. We have implemented 2 methods for estimating the uncertainties on the RVs and model scores based on the photon uncertainties in the original data.","category":"page"},{"location":"error/","page":"Model error estimation","title":"Model error estimation","text":"For getting quick estimates of the uncertainties, we can look at the local curvature of the likelihood space.  If one assumes that loss is approximately a Gaussian log-likelihood, then the covariance matrix, Sigma_beta_M can be approximated as ","category":"page"},{"location":"error/","page":"Model error estimation","title":"Model error estimation","text":"Sigma_beta_M approx (-H(beta_M))^-1","category":"page"},{"location":"error/","page":"Model error estimation","title":"Model error estimation","text":"where ","category":"page"},{"location":"error/","page":"Model error estimation","title":"Model error estimation","text":"H(beta_M)_ij=dfracdelta^2 ell(beta_M)delta beta_Mi delta beta_Mj","category":"page"},{"location":"error/","page":"Model error estimation","title":"Model error estimation","text":"is the Hessian matrix and ell(beta_M) is the approx Gaussian log-likelihood (which in our case is dfrac-mathcalL2). The variance of each model parameter can be further approximated assuming that the off-diagonal entries of H(beta_M) are zero (i.e. assuming any beta_Mi is uncorrelated with beta_Mj)","category":"page"},{"location":"error/","page":"Model error estimation","title":"Model error estimation","text":"dfrac1sigma_beta_Mi^2 approx -dfracdelta^2 ell(beta_M)delta beta_Mi^2","category":"page"},{"location":"error/","page":"Model error estimation","title":"Model error estimation","text":"We effectively approximate dfracdelta^2 ell(beta_M)delta beta_Mi^2 with finite differences. This is made available the user with","category":"page"},{"location":"error/","page":"Model error estimation","title":"Model error estimation","text":"StellarSpectraObservationFitting.estimate_σ_curvature","category":"page"},{"location":"error/#StellarSpectraObservationFitting.estimate_σ_curvature","page":"Model error estimation","title":"StellarSpectraObservationFitting.estimate_σ_curvature","text":"estimate_σ_curvature(mws; kwargs...)\n\nEstimate the uncertainties for the RVs and scores in mws based on the local curvature of the loss function. Faster than estimate_σ_bootstrap(), but less reliable from ignoring cross terms in the Hessian.\n\n\n\n\n\n","category":"function"},{"location":"error/","page":"Model error estimation","title":"Model error estimation","text":"This method is very fast and recommended when performing repeated, iterative analyses (e.g. during data exploration or survey simulation).","category":"page"},{"location":"error/","page":"Model error estimation","title":"Model error estimation","text":"Another method available in SSOF for estimating errors is via bootstrap resampling. In this method, we repeatedly refit the model to the data after adding white noise to each pixel at the reported variance levels. An estimate for the covariance of beta_M can then be found by looking at the distribution of the proposed beta_M after the repeated refittings. These estimates for the uncertainties tend to be sim 11-15x higher than the loss space curvature based estimates (likely due to the ignored off-diagonal terms in H(beta_M)). This method is slower but gives a better overall estimate for the uncertainties (and covariances if desired) and is recommended when finalizing analysis results.","category":"page"},{"location":"error/","page":"Model error estimation","title":"Model error estimation","text":"StellarSpectraObservationFitting.estimate_σ_bootstrap","category":"page"},{"location":"error/#StellarSpectraObservationFitting.estimate_σ_bootstrap","page":"Model error estimation","title":"StellarSpectraObservationFitting.estimate_σ_bootstrap","text":"estimate_σ_bootstrap(mws; n=50, return_holders=false, recalc_mean=false, multithread=nthreads() > 3, verbose=true)\n\nEstimate the uncertainties (and potentially covariances) for the RVs and scores in mws based on looking at the distribution of best-fit parameters after re-injecting photon noise. Slower than estimate_σ_curvature(), but more reliable.\n\n\n\n\n\n","category":"function"},{"location":"prior/#Regularization","page":"Regularization","title":"Regularization","text":"","category":"section"},{"location":"prior/","page":"Regularization","title":"Regularization","text":"Many different regularizations can be added to the SSOF loss function to prevent overfitting and encourage model sparsity and smoothness for the model templates and feature vectors. Namely the classic L1 and L2 norms, as well as a fast 𝒪(n) GP term.","category":"page"},{"location":"prior/","page":"Regularization","title":"Regularization","text":"mathcalL_R(beta_M beta_R) = mathcalL(beta_M) + a_1 ell_textrmLSF(xi_oplus mu_oplus - 1) + a_2 ell_textttSOAP(xi_star mu_star - 1) + a_3mu_oplus_2^2 + a_4mu_star_2^2 + a_5mu_oplus_1^1 + a_6mu_star_1^1 + a_7 sum_i^K_oplus ell_textrmLSF(xi_oplus W_oplusi) + a_8 sum_i^K_star ell_textttSOAP(xi_star W_stari) + a_9W_oplus_2^2 + a_10W_star_2^2 + a_11W_oplus_1^1 + a_12W_star_1^1 + S_oplus_2^2 + S_star_2^2","category":"page"},{"location":"prior/","page":"Regularization","title":"Regularization","text":"while the regularization coefficients have default values, you can find the optimal set for the given SSOF model and dataset with cross validation using StellarSpectraObservationFitting.fit_regularization!","category":"page"},{"location":"prior/","page":"Regularization","title":"Regularization","text":"StellarSpectraObservationFitting.fit_regularization!","category":"page"},{"location":"prior/#StellarSpectraObservationFitting.fit_regularization!","page":"Regularization","title":"StellarSpectraObservationFitting.fit_regularization!","text":"fit_regularization!(mws, testing_inds; key_list=_key_list_fit, share_regs=false, kwargs...)\n\nFit all of the regularization values in key_list for the model in mws\n\n\n\n\n\nfit_regularization!(mws; verbose=true, testing_ratio=0.33, careful_first_step=true, speed_up=false, kwargs...)\n\nFind the best fit model without regularization then fit all of the regularization values in key_list for the model in mws\n\n\n\n\n\n","category":"function"},{"location":"prior/","page":"Regularization","title":"Regularization","text":"The math behind the Kalman-filtering based methods for the 𝒪(n) GP inference can be found in the appendix of the SSOF paper (submitted) while the actual code is in src/priorgpfunctions.jl","category":"page"},{"location":"gettingstarted/#Getting-started","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"gettingstarted/#Installation","page":"Getting started","title":"Installation","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"The most current, tagged version of StellarSpectraObservationFitting.jl will soon be able to be easily installed using Julia's Pkg","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"Pkg.add(\"StellarSpectraObservationFitting\")","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"For now, use","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"using Pkg\nPkg.add(;url = \"https://github.com/christiangil/StellarSpectraObservationFitting.jl\")\n# Pkg.develop(;url = \"https://github.com/christiangil/StellarSpectraObservationFitting.jl\")  # if you wanted to be able to locally edit the code easily","category":"page"},{"location":"gettingstarted/#Example","page":"Getting started","title":"Example","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"An example notebook can be found here","category":"page"},{"location":"gettingstarted/#Getting-Help","page":"Getting started","title":"Getting Help","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"To get help on specific functionality you can either look up the information here, or if you prefer you can make use of Julia's native doc-system. For example here's how to get additional information on StellarSpectraObservationFitting.calculate_initial_model within Julia's REPL:","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"?StellarSpectraObservationFitting.calculate_initial_model","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"If you encounter a bug or would like to participate in the development of this package come find us on Github.","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"christiangil/StellarSpectraObservationFitting.jl","category":"page"},{"location":"model/#Model-functions","page":"Model functions","title":"Model functions","text":"","category":"section"},{"location":"model/","page":"Model functions","title":"Model functions","text":"Modules = [StellarSpectraObservationFitting]\nPages   = [\"src/model_functions.jl\",]","category":"page"},{"location":"opt/#Optimization","page":"Optimization","title":"Optimization","text":"","category":"section"},{"location":"opt/","page":"Optimization","title":"Optimization","text":"Before optimization, the SSOF problem (with a SSOF model and the StellarSpectraObservationFitting.LSFData it's being fit with) is organized into a work space (like StellarSpectraObservationFitting.TotalWorkspace) which includes a suitable chi-squared loss function and its gradient","category":"page"},{"location":"opt/","page":"Optimization","title":"Optimization","text":"mathcalL(beta_M) = sum_n=1^N (Y_Dn - Y_Mn)^T Sigma_n^-1 (Y_Dn - Y_Mn) + textrmconstant","category":"page"},{"location":"opt/","page":"Optimization","title":"Optimization","text":"This object can be passed to a function like StellarSpectraObservationFitting.improve_model! to optimize the SSOF model on the data.","category":"page"},{"location":"opt/","page":"Optimization","title":"Optimization","text":"StellarSpectraObservationFitting.improve_model!","category":"page"},{"location":"opt/#StellarSpectraObservationFitting.improve_model!","page":"Optimization","title":"StellarSpectraObservationFitting.improve_model!","text":"improve_model!(mws; verbose=true, kwargs...)\n\nTrain the model in mws with an extra step to ensure we are at a local maximum for the scores and RVs\n\n\n\n\n\n","category":"function"},{"location":"empca/#EMPCA-functions","page":"(D)EMPCA","title":"EMPCA functions","text":"","category":"section"},{"location":"empca/","page":"(D)EMPCA","title":"(D)EMPCA","text":"Modules = [StellarSpectraObservationFitting]\nPages   = [\"src/EMPCA.jl\", \"src/DPCA_functions.jl\"]","category":"page"},{"location":"empca/#ExpectationMaximizationPCA.EMPCA!-Tuple{StellarSpectraObservationFitting.FullLinearModel, AbstractMatrix{T} where T, AbstractMatrix{T} where T}","page":"(D)EMPCA","title":"ExpectationMaximizationPCA.EMPCA!","text":"EMPCA!(lm, data_tmp, weights; kwargs...)\n\nPerform Expectation maximization PCA on data_temp. See https://github.com/christiangil/ExpectationMaximizationPCA.jl\n\n\n\n\n\n","category":"method"},{"location":"empca/#StellarSpectraObservationFitting.DEMPCA!-Union{Tuple{T}, Tuple{AbstractVecOrMat{T} where T, AbstractVecOrMat{T} where T, AbstractVector{T} where T, AbstractVector{T} where T, AbstractMatrix{T} where T, AbstractMatrix{T} where T, Vector{T}}} where T<:Real","page":"(D)EMPCA","title":"StellarSpectraObservationFitting.DEMPCA!","text":"DEMPCA!(M, scores, rv_scores, μ, data_temp, weights, doppler_comp; min_flux=0., max_flux=2., save_doppler_in_M1=true, kwargs...)\n\nPerform Doppler-constrained Expectation maximization PCA on data_temp\n\n\n\n\n\n","category":"method"},{"location":"empca/#StellarSpectraObservationFitting.doppler_component-Union{Tuple{T}, Tuple{AbstractVector{T}, Vector{T}}} where T<:Real","page":"(D)EMPCA","title":"StellarSpectraObservationFitting.doppler_component","text":"doppler_component(λ, flux)\n\nEstimate the basis vector that encodes the effects of a doppler shift based on Taylor expanding f(λ/(1 + z)) about z=0 doppler_comp = λ * dF/dλ -> units of flux\n\n\n\n\n\n","category":"method"},{"location":"empca/#StellarSpectraObservationFitting.doppler_component_AD-Union{Tuple{T}, Tuple{Vector{T}, Vector{T}}} where T<:Real","page":"(D)EMPCA","title":"StellarSpectraObservationFitting.doppler_component_AD","text":"doppler_component_AD(λ, flux)\n\nEstimate the basis vector that encodes the effects of a doppler shift based on Taylor expanding f(λ/(1 + z)) about z=0. Autodiff friendly doppler_comp = λ * dF/dλ -> units of flux\n\n\n\n\n\n","category":"method"},{"location":"empca/#StellarSpectraObservationFitting.project_doppler_comp!-Tuple{AbstractVector{T} where T, AbstractMatrix{T} where T, AbstractVector{T} where T, AbstractMatrix{T} where T}","page":"(D)EMPCA","title":"StellarSpectraObservationFitting.project_doppler_comp!","text":"project_doppler_comp!(scores, data_temp, doppler_comp, weights)\n\nFinding the optimal scores to remove the weighted projection of doppler_comp from data_temp\n\n\n\n\n\n","category":"method"},{"location":"empca/#StellarSpectraObservationFitting.project_doppler_comp-Tuple{AbstractMatrix{T} where T, AbstractVector{T} where T, AbstractMatrix{T} where T}","page":"(D)EMPCA","title":"StellarSpectraObservationFitting.project_doppler_comp","text":"project_doppler_comp(data_temp, doppler_comp, weights)\n\nRemove the weighted projection of doppler_comp from data_temp\n\n\n\n\n\n","category":"method"},{"location":"empca/#StellarSpectraObservationFitting.simple_derivative-Tuple{AbstractVector{var\"#s24\"} where var\"#s24\"<:Real}","page":"(D)EMPCA","title":"StellarSpectraObservationFitting.simple_derivative","text":"simple_derivative(x)\n\nEstimate the derivative of x with finite differences (assuming unit separation)\n\n\n\n\n\n","category":"method"},{"location":"empca/#StellarSpectraObservationFitting.simple_derivative_AD-Tuple{Vector{var\"#s55\"} where var\"#s55\"<:Real}","page":"(D)EMPCA","title":"StellarSpectraObservationFitting.simple_derivative_AD","text":"simple_derivative_AD(x)\n\nEstimate the derivative of x with finite differences (assuming unit separation). Autodiff friendly\n\n\n\n\n\n","category":"method"},{"location":"general/#Utility-functions","page":"Utility functions","title":"Utility functions","text":"","category":"section"},{"location":"general/","page":"Utility functions","title":"Utility functions","text":"Modules = [StellarSpectraObservationFitting]\nPages   = [\"src/general_functions.jl\"]","category":"page"},{"location":"general/#StellarSpectraObservationFitting._trapzx2-NTuple{4, Real}","page":"Utility functions","title":"StellarSpectraObservationFitting._trapzx2","text":"_trapzx2(x1, x2, y1, y2)\n\nTwice the area under the line between (x1, y1) and (x2, y2). Used in trapezoidal integration\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting._vander-Tuple{AbstractVector{T} where T, Int64}","page":"Utility functions","title":"StellarSpectraObservationFitting._vander","text":"_vander(x, n)\n\nCalculate the the Vandermonde matrix. See https://en.wikipedia.org/wiki/Vandermonde_matrix\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.banded_inds-Tuple{Int64, Int64, Int64}","page":"Utility functions","title":"StellarSpectraObservationFitting.banded_inds","text":"banded_inds(row, span, row_len)\n\nCalculate the bounds of the filled indices for row row of a banded matrix of span span\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.bounds_generator!-Tuple{AbstractVector{T} where T, AbstractVector{T} where T}","page":"Utility functions","title":"StellarSpectraObservationFitting.bounds_generator!","text":"bounds_generator!(bounds, xs)\n\nGetting the bounds of each element in xs assuming that they fully span the domain\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.bounds_generator-Tuple{AbstractVector{T} where T}","page":"Utility functions","title":"StellarSpectraObservationFitting.bounds_generator","text":"bounds_generator!(xs)\n\nGetting the bounds of each element in xs assuming that they fully span the domain\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.clip_vector!-Tuple{Vector{T} where T}","page":"Utility functions","title":"StellarSpectraObservationFitting.clip_vector!","text":"clip_vector!(vec; max=Inf, min=-Inf)\n\nSet values in vec above max to max and below min to min\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.copy_dict!-Tuple{Dict, Dict}","page":"Utility functions","title":"StellarSpectraObservationFitting.copy_dict!","text":"copy_dict!(to, from)\n\nCopy all entries in from to to\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.est_∇-Tuple{Function, Vector{var\"#s15\"} where var\"#s15\"<:Real}","page":"Utility functions","title":"StellarSpectraObservationFitting.est_∇","text":"est_∇(f, inputs; dif=1e-7, ignore_0_inputs=false)\n\nEstimate the gradient of f at inputs using finite differences.\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.find_modes-Union{Tuple{Vector{T}}, Tuple{T}} where T<:Real","page":"Utility functions","title":"StellarSpectraObservationFitting.find_modes","text":"find_modes(data; amount=3)\n\nReturn the indices of local maxima of a data array\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.flatten_ranges-Tuple{AbstractVector{T} where T}","page":"Utility functions","title":"StellarSpectraObservationFitting.flatten_ranges","text":"flatten_ranges(ranges)\n\nReturns a range from the largest first element of those in ranges to the smallest last element of those in ranges\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.fwhm_2_σ-Tuple{Real}","page":"Utility functions","title":"StellarSpectraObservationFitting.fwhm_2_σ","text":"fwhm_2_σ(fwhm)\n\nConvert full-width at half-maximum to σ\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.general_lst_sq-Union{Tuple{T}, Tuple{AbstractMatrix{T}, AbstractVector{T} where T, Union{LinearAlgebra.Cholesky, LinearAlgebra.Diagonal}}} where T<:Real","page":"Utility functions","title":"StellarSpectraObservationFitting.general_lst_sq","text":"general_lst_sq(dm, data, Σ)\n\nSolve a weighted linear system of equations. See https://en.wikipedia.org/wiki/Generalizedleastsquares#Method_outline\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.general_lst_sq_f-Tuple{AbstractVector{T} where T, Any, Int64}","page":"Utility functions","title":"StellarSpectraObservationFitting.general_lst_sq_f","text":"general_lst_sq_f(data, Σ, order; x=eachindex(data))\n\nGet a polynomial of order order fit to data\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.int2ind-Tuple{AbstractVecOrMat{T} where T, Int64}","page":"Utility functions","title":"StellarSpectraObservationFitting.int2ind","text":"int2ind(a, x)\n\nFind the index where x can be found in a\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.make_template-Tuple{Matrix{T} where T, Matrix{T} where T}","page":"Utility functions","title":"StellarSpectraObservationFitting.make_template","text":"make_template(matrix, σ²; default=1., use_mean=false, kwargs...)\n\nReduce matrix to its median (or weighted mean) and clip the result\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.make_template-Tuple{Matrix{T} where T}","page":"Utility functions","title":"StellarSpectraObservationFitting.make_template","text":"make_template(matrix; use_mean=false, kwargs...)\n\nReduce matrix to its median (or mean) and clip the result\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.multiple_append!-Union{Tuple{T}, Tuple{Vector{T}, Vararg{Any, N} where N}} where T<:Real","page":"Utility functions","title":"StellarSpectraObservationFitting.multiple_append!","text":"multiple_append!(a, b...)\n\nGeneralized version of the Julia's append!() function\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.observation_night_inds-Tuple{AbstractVector{var\"#s11\"} where var\"#s11\"<:Real}","page":"Utility functions","title":"StellarSpectraObservationFitting.observation_night_inds","text":"observation_night_inds(times_in_days)\n\nFind the indices for each observing night\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.ordinary_lst_sq-Union{Tuple{T}, Tuple{AbstractMatrix{T}, AbstractVector{T} where T}} where T<:Real","page":"Utility functions","title":"StellarSpectraObservationFitting.ordinary_lst_sq","text":"ordinary_lst_sq(dm, data)\n\nSolve a linear system of equations. See https://en.wikipedia.org/wiki/Ordinaryleastsquares#Matrix/vector_formulation\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.ordinary_lst_sq_f-Tuple{AbstractVector{T} where T, Int64}","page":"Utility functions","title":"StellarSpectraObservationFitting.ordinary_lst_sq_f","text":"ordinary_lst_sq_f(data, order; x=eachindex(data))\n\nGet a polynomial of order order fit to data\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.oversamp_interp-Tuple{Real, Real, AbstractVector{T} where T, AbstractVector{T} where T}","page":"Utility functions","title":"StellarSpectraObservationFitting.oversamp_interp","text":"oversamp_interp(lo_x, hi_x, x, y)\n\nInterpolating by getting the average value of y from lo_x to hi_x\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.parse_args-Tuple{Int64, DataType, Any}","page":"Utility functions","title":"StellarSpectraObservationFitting.parse_args","text":"parse_args(ind, type, default)\n\nRetrieve ARGS[ind] as type type if it exists. Otherwise, return default\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.searchsortednearest-Tuple{AbstractVector{T} where T<:Real, Real}","page":"Utility functions","title":"StellarSpectraObservationFitting.searchsortednearest","text":"searchsortednearest(a, x; lower=false)\n\nFind the index of the value closest to x in a (which is a sorted vector)\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.self_cor-Tuple{AbstractMatrix{T} where T}","page":"Utility functions","title":"StellarSpectraObservationFitting.self_cor","text":"self_cor(a; set_diag=true)\n\nGet the correlation matrix between the rows in a\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.trapz_small-Tuple{AbstractVector{T} where T, AbstractVector{T} where T}","page":"Utility functions","title":"StellarSpectraObservationFitting.trapz_small","text":"trapz_small(x, y)\n\nTrapezoidal integration of y over x. Shamelessly modified from https://github.com/dextorious/NumericalIntegration.jl/blob/master/src/NumericalIntegration.jl.  See https://en.wikipedia.org/wiki/Trapezoidal_rule\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.trapz_small-Tuple{Real, Real, AbstractVector{T} where T, AbstractVector{T} where T}","page":"Utility functions","title":"StellarSpectraObservationFitting.trapz_small","text":"trapz_small(lo_x, hi_x, x, y)\n\nTrapezoidal integration of y over x from lo_x to hi_x. See https://en.wikipedia.org/wiki/Trapezoidal_rule\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.vector_zero-Tuple{AbstractVecOrMat{T} where T}","page":"Utility functions","title":"StellarSpectraObservationFitting.vector_zero","text":"vector_zero(θ)\n\nGet a zero version of θ\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.wavenumber_to_Å-Tuple{Real}","page":"Utility functions","title":"StellarSpectraObservationFitting.wavenumber_to_Å","text":"wavenumber_to_Å(wn)\n\nConvert wn (in 1/cm) to wavelength (in Å)\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.weighted_mean-Tuple{AbstractMatrix{T} where T, AbstractMatrix{T} where T}","page":"Utility functions","title":"StellarSpectraObservationFitting.weighted_mean","text":"weighted_mean(x, σ²; default=0., kwargs...)\n\nCalculates the weighted mean of x given σ²\n\n\n\n\n\n","category":"method"},{"location":"general/#StellarSpectraObservationFitting.Å_to_wavenumber-Tuple{Real}","page":"Utility functions","title":"StellarSpectraObservationFitting.Å_to_wavenumber","text":"Å_to_wavenumber(λ)\n\nConvert λ (in Å) to wave number (in 1/cm)\n\n\n\n\n\n","category":"method"},{"location":"LICENSE/#LICENSE","page":"LICENSE","title":"LICENSE","text":"","category":"section"},{"location":"LICENSE/","page":"LICENSE","title":"LICENSE","text":"using Markdown, StellarSpectraObservationFitting\nMarkdown.parse_file(joinpath(pkgdir(StellarSpectraObservationFitting), \"LICENSE.md\"))","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = StellarSpectraObservationFitting","category":"page"},{"location":"#StellarSpectraObservationFitting.jl-(SSOF,-*/suf/*-like-soufflé)-Documentation","page":"Home","title":"StellarSpectraObservationFitting.jl (SSOF, /suf/ like soufflé) Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: SSOF model)","category":"page"},{"location":"","page":"Home","title":"Home","text":"StellarSpectraObservationFitting (SSOF) is a Julia package for creating data-driven models (with fast, physically-motivated Gaussian Process regularization) for the time-variable spectral features for both the telluric transmission and stellar spectrum measured by Extremely Precise Radial Velcotiy (EPRV) spectrographs. ","category":"page"},{"location":"#Where-to-begin?","page":"Home","title":"Where to begin?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you haven't used SSOF before, a good place to start is the \"Getting Started\" section. We list how to install the package as well as a simple example","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"gettingstarted.md\"]\nDepth = 2","category":"page"},{"location":"","page":"Home","title":"Home","text":"The User's guide (see the navigation bar) may also be of use","category":"page"},{"location":"#Indices","page":"Home","title":"Indices","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"All of the package functions can be found here","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"indices.md\"]","category":"page"}]
}
